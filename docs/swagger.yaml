openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Esarj
  license:
    name: MIT
servers:
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /users:
    get:
      summary: Returns a list of users.
      operationId: listUsers
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: The number of items to skip before starting to collect the result set
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserListItem'
    post:
      summary: Updates or Creates a user.
      operationId: postUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountType
                - userName
                - status
                - firstName
                - lastName
                - email
                - mobile

              properties:
                accountType:
                  $ref: '#/components/schemas/AccountType'
                userName:
                  type: string
                status:
                  type: boolean
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                mobile:
                  type: string
      responses:
        '201':
          description: Created
  /users/{userId}:
    get:
      summary: Returns a user by ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: Parameter description in CommonMark or HTML.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /enums:
    get:
      summary: Returns enums.
      operationId: getEnums
      responses:
        '200':
          description: Enums object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enums'

  #       '400':
  #         description: The specified user ID is invalid (not a number).
  #       '404':
  #         description: A user with the specified ID was not found.
  #       default:
  #         description: Unexpected error
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Enums:
      type: object
      properties:
        accountTypes:
          type: array
          items:
            $ref: '#/components/schemas/AccountType'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Status'
    UserListItem:
      type: object
      required:
        - id
        - personCompany
        - accountType
        - status
        - customerId
      properties:
        id:
          type: integer
          format: int64
        personCompany:
          type: string
        status:
          type: boolean
        customerId:
          type: integer
          format: int64
        accountType:
          $ref: '#/components/schemas/AccountType'

    AccountType:
      type: string
      enum: ['Personal', 'Corporate']

    Status:
      type: string
      enum: ['Active', 'Passive']

    User:
      type: object
      required:
        - id
        - userName
        - firstName
        - lastName
        - email
        - password
        - phone
        - userStatus
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
