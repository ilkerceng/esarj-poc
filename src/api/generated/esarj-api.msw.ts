/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * Swagger Esarj
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from 'msw';

export const getListUsersMock = () => [
  {
    id: 4124694674407424,
    personCompany: 'Kirk Hane',
    status: 1,
    accountType: 1,
    customerId: '4678140',
  },
  {
    id: 2358865563746304,
    personCompany: 'zero tolerance',
    status: 2,
    accountType: 2,
    customerId: '0005449',
  },
  {
    id: 245251658743808,
    personCompany: 'Gwendolyn Kshlerin',
    status: 1,
    accountType: 1,
    customerId: '0407619',
  },
  {
    id: 1852004477435904,
    personCompany: 'executive',
    status: 2,
    accountType: 2,
    customerId: '0635021',
  },
  {
    id: 7029827632627712,
    personCompany: 'Delbert Lynch',
    status: 1,
    accountType: 1,
    customerId: '9776395',
  },
  {
    id: 724463215706112,
    personCompany: 'foreground',
    status: 2,
    accountType: 2,
    customerId: '0037300',
  },
  {
    id: 3643498966286336,
    personCompany: 'Mitchell Hand',
    status: 1,
    accountType: 1,
    customerId: '0024670',
  },
  {
    id: 4919435817123840,
    personCompany: 'client-driven',
    status: 2,
    accountType: 2,
    customerId: '0003064',
  },
  {
    id: 3349953009156096,
    personCompany: 'Helen Borer',
    status: 1,
    accountType: 1,
    customerId: '0001724',
  },
  {
    id: 5470777105186816,
    personCompany: 'demand-driven',
    status: 2,
    accountType: 2,
    customerId: '0917125',
  },
];

export const getPostUserMock = () => ({
  id: '0079481',
  status: 1,
  accountType: 1,
  customerId: '0000210',
  userName: 'YIcMd3azl',
  firstName: 'Lauren',
  lastName: 'Stokes',
  email: 'Pierre6@yahoo.com',
  mobile: '275.944.7340 x1647',
});

export const getGetUserByIdMock = () => ({
  id: '0053569',
  status: 1,
  accountType: 1,
  customerId: '0093152',
  userName: 'MRNi5RzGdBmE51zq9GO',
  firstName: 'Marge',
  lastName: 'Turner',
  email: 'Elouise.Cartwright7@hotmail.com',
  mobile: '288.515.8297 x669',
});

export const getGetEnumsMock = () => ({
  accountTypes: [
    { id: 1, label: 'Personal' },
    { id: 2, label: 'Corporate' },
  ],
  statuses: [
    { id: 1, label: 'Active' },
    { id: 2, label: 'Passive' },
  ],
});

export const getSwaggerEsarjMock = () => [
  http.get('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getListUsersMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.post('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPostUserMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetUserByIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/enums', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetEnumsMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
];
