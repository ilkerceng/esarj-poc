/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * Swagger Esarj
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import { AccountType, Status } from './model';

export const getListUsersMock = () => [
  {
    id: 8379487687278592,
    personCompany: 'Mr. Bennie Brakus',
    status: true,
    accountType: 'Personal',
    customerId: '8690757',
  },
  {
    id: 2785972706082816,
    personCompany: 'contextually-based',
    status: true,
    accountType: 'Corporate',
    customerId: '0182302',
  },
  {
    id: 7013218207662080,
    personCompany: 'Angie Lynch',
    status: false,
    accountType: 'Personal',
    customerId: '0000600',
  },
  {
    id: 3205950565515264,
    personCompany: 'client-driven',
    status: true,
    accountType: 'Corporate',
    customerId: '0008945',
  },
  {
    id: 8511480397824000,
    personCompany: 'Ted Okuneva',
    status: false,
    accountType: 'Personal',
    customerId: '1578097',
  },
  {
    id: 4042485145796608,
    personCompany: 'solution-oriented',
    status: true,
    accountType: 'Corporate',
    customerId: '0009914',
  },
  {
    id: 2073704771092480,
    personCompany: 'Valerie Bode',
    status: false,
    accountType: 'Personal',
    customerId: '7719685',
  },
  {
    id: 2785789224157184,
    personCompany: 'needs-based',
    status: false,
    accountType: 'Corporate',
    customerId: '0000212',
  },
  {
    id: 8694094748450816,
    personCompany: 'Traci Upton',
    status: true,
    accountType: 'Personal',
    customerId: '0273860',
  },
  {
    id: 7507312134586368,
    personCompany: '24 hour',
    status: false,
    accountType: 'Corporate',
    customerId: '0003785',
  },
];

export const getPostUserMock = () => ({
  id: 709651454754816,
  status: false,
  accountType: 'Personal',
  customerId: '0007945',
  userName: 'Margarita_Cartwright',
  firstName: 'Audreanne',
  lastName: 'Bednar',
  email: 'Lavern.Dare85@yahoo.com',
  mobile: '702-828-2029 x977',
});

export const getGetUserByIdMock = () => ({
  id: 6362011975811072,
  status: false,
  accountType: 'Personal',
  customerId: '0005176',
  userName: 'Roscoe_Daugherty33',
  firstName: 'Oceane',
  lastName: 'Durgan',
  email: 'Matilde_Kuhn74@gmail.com',
  mobile: '870-757-6104 x73637',
});

export const getGetEnumsMock = () => ({
  accountTypes: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(AccountType)),
    undefined,
  ]),
  statuses: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Status)),
    undefined,
  ]),
});

export const getSwaggerEsarjMock = () => [
  http.get('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getListUsersMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.post('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPostUserMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetUserByIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/enums', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetEnumsMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
];
