/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * Swagger Esarj
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from 'msw';

export const getListUsersMock = () => [
  {
    id: 8463011222126592,
    personCompany: 'Rickey Schmeler III',
    status: 1,
    accountType: 1,
    customerId: '0000933',
  },
  {
    id: 3250802653134848,
    personCompany: 'dedicated',
    status: 2,
    accountType: 2,
    customerId: '0191250',
  },
  {
    id: 1752294972456960,
    personCompany: 'Felipe Nienow',
    status: 1,
    accountType: 1,
    customerId: '0009852',
  },
  {
    id: 7184312803786752,
    personCompany: 'systematic',
    status: 2,
    accountType: 2,
    customerId: '0000535',
  },
  {
    id: 7005547085692928,
    personCompany: 'Dominic Senger',
    status: 1,
    accountType: 1,
    customerId: '0040326',
  },
  {
    id: 2362279848837120,
    personCompany: 'global',
    status: 2,
    accountType: 2,
    customerId: '0000386',
  },
  {
    id: 4661238030139392,
    personCompany: 'Israel Stamm',
    status: 1,
    accountType: 1,
    customerId: '0000529',
  },
  {
    id: 6418910584766464,
    personCompany: 'transitional',
    status: 2,
    accountType: 2,
    customerId: '0000396',
  },
  {
    id: 3722803008241664,
    personCompany: 'Julie Cummerata',
    status: 1,
    accountType: 1,
    customerId: '0059354',
  },
  {
    id: 5496173100007424,
    personCompany: 'holistic',
    status: 2,
    accountType: 2,
    customerId: '0012879',
  },
];

export const getPostUserMock = () => ({
  id: 43492610932736,
  status: 1,
  accountType: 1,
  customerId: '3256407',
  userName: 'pZw9Wl62ljyVD5k93p',
  firstName: 'Tre',
  lastName: 'Tromp',
  email: 'Sharon83@yahoo.com',
  mobile: '767-802-8386',
});

export const getGetUserByIdMock = () => ({
  id: 6728174851325952,
  status: 1,
  accountType: 1,
  customerId: '0707337',
  userName: 'GaEC1NKYt8R3ikm8',
  firstName: 'Dawson',
  lastName: 'Jenkins-Casper',
  email: 'Cameron.Klocko95@yahoo.com',
  mobile: '862.624.1790',
});

export const getGetEnumsMock = () => ({
  accountTypes: [
    { id: 1, label: 'Personal' },
    { id: 2, label: 'Corporate' },
  ],
  statuses: [
    { id: 1, label: 'Active' },
    { id: 2, label: 'Passive' },
  ],
});

export const getSwaggerEsarjMock = () => [
  http.get('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getListUsersMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.post('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPostUserMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetUserByIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/enums', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetEnumsMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
];
