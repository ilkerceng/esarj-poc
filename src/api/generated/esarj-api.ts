/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Swagger Esarj
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  Enums,
  ListUsersParams,
  PostUserBody,
  User,
  UserListItem,
} from './model';
import { apiClient } from '../apiClient';
import type { ErrorType, BodyType } from '../apiClient';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Returns a list of users.
 */
export const listUsers = (
  params?: ListUsersParams,
  options?: SecondParameter<typeof apiClient>,
) => {
  return apiClient<UserListItem[]>(
    { url: `/users`, method: 'GET', params },
    options,
  );
};

export const getListUsersQueryKey = (params?: ListUsersParams) => {
  return [`/users`, ...(params ? [params] : [])] as const;
};

export const getListUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = () =>
    listUsers(params, requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = ErrorType<unknown>;

/**
 * @summary Returns a list of users.
 */
export const useListUsers = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Returns a list of users.
 */
export const prefetchListUsers = async <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<unknown>,
>(
  queryClient: QueryClient,
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): Promise<QueryClient> => {
  const queryOptions = getListUsersQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Updates or Creates a user.
 */
export const postUser = (
  postUserBody: BodyType<PostUserBody>,
  options?: SecondParameter<typeof apiClient>,
) => {
  return apiClient<void>(
    {
      url: `/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postUserBody,
    },
    options,
  );
};

export const getPostUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUser>>,
    TError,
    { data: BodyType<PostUserBody> },
    TContext
  >;
  request?: SecondParameter<typeof apiClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUser>>,
  TError,
  { data: BodyType<PostUserBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUser>>,
    { data: BodyType<PostUserBody> }
  > = props => {
    const { data } = props ?? {};

    return postUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUser>>
>;
export type PostUserMutationBody = BodyType<PostUserBody>;
export type PostUserMutationError = ErrorType<unknown>;

/**
 * @summary Updates or Creates a user.
 */
export const usePostUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUser>>,
    TError,
    { data: BodyType<PostUserBody> },
    TContext
  >;
  request?: SecondParameter<typeof apiClient>;
}) => {
  const mutationOptions = getPostUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Returns a user by ID.
 */
export const getUserById = (
  userId: number,
  options?: SecondParameter<typeof apiClient>,
) => {
  return apiClient<User>({ url: `/users/${userId}`, method: 'GET' }, options);
};

export const getGetUserByIdQueryKey = (userId: number) => {
  return [`/users/${userId}`] as const;
};

export const getGetUserByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = () =>
    getUserById(userId, requestOptions);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdQueryError = ErrorType<unknown>;

/**
 * @summary Returns a user by ID.
 */
export const useGetUserById = <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserByIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Returns a user by ID.
 */
export const prefetchGetUserById = async <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = ErrorType<unknown>,
>(
  queryClient: QueryClient,
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetUserByIdQueryOptions(userId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Returns enums.
 */
export const getEnums = (options?: SecondParameter<typeof apiClient>) => {
  return apiClient<Enums>({ url: `/enums`, method: 'GET' }, options);
};

export const getGetEnumsQueryKey = () => {
  return [`/enums`] as const;
};

export const getGetEnumsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEnums>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getEnums>>, TError, TData>
  >;
  request?: SecondParameter<typeof apiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEnumsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnums>>> = () =>
    getEnums(requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEnums>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEnumsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEnums>>
>;
export type GetEnumsQueryError = ErrorType<unknown>;

/**
 * @summary Returns enums.
 */
export const useGetEnums = <
  TData = Awaited<ReturnType<typeof getEnums>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getEnums>>, TError, TData>
  >;
  request?: SecondParameter<typeof apiClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEnumsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Returns enums.
 */
export const prefetchGetEnums = async <
  TData = Awaited<ReturnType<typeof getEnums>>,
  TError = ErrorType<unknown>,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEnums>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetEnumsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
