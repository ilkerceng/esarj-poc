/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Swagger Esarj
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type { ListUsersParams, User, UserListItem } from './model';
import { apiClient } from '../apiClient';
import type { ErrorType } from '../apiClient';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Returns a list of users.
 */
export const listUsers = (
  params?: ListUsersParams,
  options?: SecondParameter<typeof apiClient>,
  signal?: AbortSignal,
) => {
  return apiClient<UserListItem[]>(
    { url: `/users`, method: 'GET', params, signal },
    options,
  );
};

export const getListUsersQueryKey = (params?: ListUsersParams) => {
  return [`/users`, ...(params ? [params] : [])] as const;
};

export const getListUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
    signal,
  }) => listUsers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = ErrorType<unknown>;

/**
 * @summary Returns a list of users.
 */
export const useListUsers = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Returns a user by ID.
 */
export const getUsersUserId = (
  userId: number,
  options?: SecondParameter<typeof apiClient>,
  signal?: AbortSignal,
) => {
  return apiClient<User>(
    { url: `/users/${userId}`, method: 'GET', signal },
    options,
  );
};

export const getGetUsersUserIdQueryKey = (userId: number) => {
  return [`/users/${userId}`] as const;
};

export const getGetUsersUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({
    signal,
  }) => getUsersUserId(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersUserId>>
>;
export type GetUsersUserIdQueryError = ErrorType<unknown>;

/**
 * @summary Returns a user by ID.
 */
export const useGetUsersUserId = <
  TData = Awaited<ReturnType<typeof getUsersUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>
    >;
    request?: SecondParameter<typeof apiClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
